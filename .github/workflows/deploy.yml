# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: CD - Deploy Application to GCP

on:
  push:
    branches: [ master ]
  workflow_dispatch:
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
  GKE_ZONE: ${{ secrets.GKE_ZONE }}
  DEPLOYMENT_NAME: back
  IMAGE: kenshin-back
  ARTIFACT_DOCKER: ${{ secrets.ARTIFACT_DOCKER }}
  REPO: ${{ secrets.ARTIFACT_REPO }}

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'gradle'

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure Docker to use the gcloud command-line tool as a credential
      # helper for authentication
      - name: gcloud docker auth
        run: |-
          gcloud --quiet auth configure-docker $ARTIFACT_DOCKER

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      - name: Set up yml file
        run: |
          echo "${{ secrets.APPLICATION_OAUTH_YML }}" >> src/main/resources/application-oauth.yml
          echo "${{ secrets.APPLICATION_PROD_YML }}" >> src/main/resources/application-prod.yml

      - name: Test with Gradle
        uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
        with:
          arguments: test

      - name: Build With Gradle
        uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
        with:
          arguments: build

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
          --tag "$REPO/$IMAGE:$GITHUB_SHA" \
          .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "$REPO/$IMAGE:$GITHUB_SHA"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        id: deploy
        run: |-
          ./kustomize edit set image REPO/IMAGE:TAG=$REPO/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME

      # discord notify
      - name: Set success color
        if: always()
        run: | 
          if [[ ${{ steps.deploy.outcome }} == "success" ]]; then 
            echo "STATUS_COLOR=7667570" >> "$GITHUB_ENV"
          else 
            echo "STATUS_COLOR=16735560" >> "$GITHUB_ENV"
          fi
      - name: Discord notification
        if: always()
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
          DISCORD_EMBEDS: '[{"title":"${{github.repository}}","color":${{env.STATUS_COLOR}},"url":"${{github.server_url}}/${{github.repository}}","fields":[{"name":"WorkFlow","value":"${{github.workflow}}"},{"name":"Commit","value":"${{github.sha}}"}]}]'
        uses: Ilshidur/action-discord@master  
